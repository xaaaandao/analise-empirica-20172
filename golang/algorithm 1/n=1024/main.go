package main

/* Utilizado para imprimir */
import "fmt"
/* Utilizado para pegar o tempo */
import "time"

/**
* Autor: Alexandre Yuji Kajihara e Clodoaldo Basaglia da Fonseca
* Descrição: aplicamos uma função para encontrar o máximo valor do subarranjo, é um dos menos eficiente.
* Data de criação: 07/11/2017
* Data de atualização: 07/11/2017
*/

/**
* Esta função enumeration(int vector[], int n) recebemos um vetor e seu tamanho 
* e aplicamos a função achando o máximo valor do subarranjo.
* Esse algoritmo é o menos eficiente para se procurar o máximo valor do subarranjo.
@param vector, vetor do tipo de inteiro, que será aplicado a função enumeration().
@param n, tipo de inteiro, que é o tamanho dos vetores.
@return best, é um inteiro que retorna o melhor valor.
*/
func enumeration(vector []int, n int) int {
	var i, j, k int = 0, 0, 0
	var best, count int = 0, 0
	for i = 0; i < n; i++ {
		for j = i; j < n; j++ {
			count = 0
			for k = i; k <= j; k++ {
				count = count + vector[k]
			} 
			if count > best{
				best = count
			}
		}
	}
	return best
}

func main() {
	vector := []int{-448, -469, -7537, -997, -4960, 6576, 6375, -536, -5669, 7250, 5407, -1794, -4184, -4026, 7110, 6204, 2144, 1576, 2147, 950, -294, 285, 1320, -2588, 4110, 2481, 3738, 202, 4734, 7562, -7655, -3914, -1099, -7000, 3281, 2125, 7768, 1463, -6611, -6102, 513, 6988, 296, 4521, -5230, -794, 2524, 5106, -7411, -3522, -2137, 479, 4947, 7368, 6084, 857, 1656, 1629, -7142, -1810, 991, -6605, 2468, 8084, -5421, -2452, 2008, -5854, 7196, 3589, -3764, -484, 2385, 4717, -4156, 5347, -4270, 6560, 2252, -3489, -5162, -8086, 5175, 7969, 7474, 3066, 633, 930, -3506, 1683, 7312, 5677, 3270, 1579, 5560, 6041, 7319, -624, -8006, 6322, -5228, -3585, -2363, 5341, -7061, 1673, 2495, -3139, 33, -3454, 1556, 3055, -3347, -1462, 2831, -4074, -6597, -4728, 5048, -1910, 5147, 4159, -4434, 217, -2455, -7074, -1943, -3328, 494, -1764, -5207, 3450, 2843, 623, 591, 3966, -5905, -5115, -7366, 2320, -376, 2374, -2818, 4461, -7280, -8187, -7806, -5685, -4723, 5427, 589, -7777, 1393, 4348, 632, 7131, 5466, 6882, -4398, -2241, -3075, -1413, -6992, 7952, 7394, 1791, 3725, -6711, 4869, 4543, 3801, -3708, -1276, -7217, -7440, -372, -7212, -7062, 2128, -3751, 6557, -5476, -3336, -242, 7056, 5481, -1304, 4321, 4162, 2490, -6121, -7106, -7124, -4920, -7355, -7930, 5055, 4554, -6449, 1723, 904, 5536, 6207, 7812, 6511, 6951, -752, 7483, 8082, -6825, -4469, 6446, -4109, 388, -1997, -5245, -2332, 4891, 7260, -6363, -820, -7053, -5285, 241, -3781, -4448, 503, -6927, -8087, 2246, 2989, 1001, -419, 995, 620, -2100, -246, 8052, -2818, -365, -6966, 898, -2120, -2890, -6907, 4076, 49, -1047, 766, -884, 782, 8139, 255, 3689, 179, 4658, 7425, -7511, 5924, 7522, 2919, 712, 330, -5693, -6486, -7251, 391, 1452, -7399, 5758, -7114, -6181, -1537, -1041, -879, -260, -5158, 7362, 6877, 3792, -1714, -542, 3738, 6733, -5054, -4284, 3199, -5822, -3603, 922, -6493, 7500, -6559, 2021, -6393, -4861, 2962, 2190, 4784, 3747, -253, 5862, 5759, 6402, -3380, -3313, -2059, -354, -4151, -3375, -4754, 2327, 4275, 7168, 859, 7413, -5308, -4143, -6610, -727, 4971, -4919, -1427, 6596, 5294, 372, -6457, 56, -5639, 6511, -4390, 2301, 4172, -6832, 502, -7400, -1952, 6636, 438, 2089, -4932, 3868, -3785, 7528, 2844, 5258, 6748, 5720, -7077, -8062, -3200, 6078, -4789, 3565, 4482, -7695, -4264, 6209, 553, -1710, 4527, 4347, -7610, 506, 5708, 1084, 1290, -4445, -481, -6472, 5828, 2772, 5588, -6158, 2107, 231, 7292, 654, -2242, -7986, 784, 2743, 6285, 4180, -1893, 2566, 4677, 2028, 582, -2963, -7875, -3084, -6817, -7301, 5606, 7075, 1967, -1304, -5563, -6706, 416, -7936, 4250, -2197, -5902, -1836, 6227, -6810, 7002, -4216, -6604, -406, 6711, 7873, -4419, -3374, 2246, -7935, 6838, -5373, -2714, 7155, -273, -1347, 8038, -2867, -2464, 1812, 4021, 165, 3290, -3764, 414, -653, 2231, 2704, 5695, 257, 4086, 4505, 4226, 5675, -4102, 2744, 5347, -337, 7554, -607, -88, 6199, 2204, 5382, 5153, -6261, -4158, 4998, -936, 1570, -1390, -5116, -6465, -6293, -688, 2141, 1239, -6658, -3348, -1259, 1792, -7462, -4955, -2183, 6397, -865, -7640, 3543, 6990, 8107, -5265, -1299, 6105, 5132, -4110, 3058, 7063, -75, -145, -2074, -6698, 6657, 1002, -4971, -7836, -7879, 5362, 1595, -6353, -6186, -7865, 3623, -5464, -4627, -6753, -7268, 2692, -6200, 4467, 1482, -6294, 7395, -8010, 7995, 4334, -3927, 2860, 3196, 4190, -5477, -7071, 5676, -7021, 2115, -7487, -6665, 2420, 6059, 3122, 4259, 8065, 3442, -310, -5600, 7007, 1129, -4676, 1506, 3113, 7984, -5205, 5011, 7178, -5030, 4806, 3319, -765, -527, -1686, -4776, 2188, -573, -7293, 3352, -6651, -6588, 4879, 3961, 7656, -199, 19, 7528, -4950, 7901, -6264, -6144, 830, -2756, 3554, -4250, -2965, 6534, -7439, -3980, -6689, 5559, 7523, 730, -3169, -2356, 4146, 7204, 5255, 5037, 2363, 6796, 6634, -951, 2556, 6097, 7042, -5617, 5424, -6109, -5909, 7344, -4061, 3105, -3604, 7678, 7040, 1623, 6011, 7793, 5828, 7506, 5151, 5150, 43, -6211, -5406, -4012, -7208, 8041, -7168, 3347, 6645, 7658, -5796, 1008, 5554, -6955, 3575, 2786, -4879, 5859, 1937, -748, 771, 6517, -1263, -390, -60, -3453, -790, -2425, -4140, -3840, -5468, 4087, -1866, -2690, -8118, -882, -2841, -7101, -5727, -4397, -7644, -3339, 4795, 6095, -2110, 178, 688, 1203, -2156, -5576, -7745, 6799, -7259, -824, -1783, 873, 3916, 5611, 6640, 7968, -6429, -7029, 3855, -103, -1526, 3921, 7199, 3817, 5012, -6729, 7612, 5553, -1876, 4214, 3455, 4199, -3801, -4058, -2791, 2227, -1450, -2352, 826, -517, 5017, 7227, -7837, 740, 4637, 6987, 507, 6400, 8143, -3831, -1904, -1584, -8102, -2905, -5960, 5094, -1442, -6541, 2446, 4867, 5857, -2300, 873, -6144, 1834, 6266, 4275, -7808, -4278, -3100, -141, -7454, -4066, 215, 1470, -7629, -999, -6216, 6955, -1049, -1862, -3149, 5559, -1780, 2138, 7791, -4887, -7497, -6951, 5752, 5554, 7099, -4749, -1766, -7238, 5278, -3700, 5221, 5654, 206, -6071, -2680, 936, -1953, 5719, -5795, -1390, -3472, -3819, -2635, 3671, 2503, 2408, 1030, -7478, -3647, 628, -4172, -2960, 1862, -6621, -5598, 760, -3178, 820, 1706, -6101, 5304, -1274, 7737, -2683, 847, -3143, 6437, 7079, -5617, -7551, -2512, -905, -3185, 3045, -5426, 7510, -2748, 3788, -8168, 1797, -3785, -4148, 7030, 6269, -2585, -6769, -1164, 2421, 2243, -7659, 4513, -645, -740, 4049, 4856, -8094, -7287, 3101, 7169, -4711, 3742, -3535, 2576, -7636, 7694, 5334, 8059, -3246, 929, 8083, 6735, 5337, -4266, 5572, 3405, 1333, 6987, -5959, -4439, 1038, -5426, -8127, -7808, 2026, 4115, 5240, 2117, 5020, 140, 1093, -7892, -4318, 5750, 2869, -3770, 5244, 10, -3904, -6203, -7261, -4022, -7661, 6260, -104, 6096, 1472, -6964, 4890, 3705, -3218, -2265, 6472, -3153, -1889, 297, -7239, -4841, -5779, 5966, 3491, 3507, 6266, 7365, 1056, 942, -4597, -1901, -7248, -317, 88, -6317, 3846, 620, 8127, -4451, -1477, 1406, -3222, -4780, -3081, 1744, 1140, -4810, 6783, 7443, 3671, 7737, -5599, 6077, 5510, 6085, 1383, 3575, 5249, -5754, -3683, -7549, 530, -2739, 319, -7575, -872, -4028, 1229, -938, -295, 7944, -7725, 4667, -5036, -2622, -1782, 4296, 752, -3191, 3546, -3769, -3655, 6132, -5885, -6346, 4024, 3690, 5413, 1072, 6120, -6463, 1708, -1551, -1010, -6174, -933, 6302, -2018, -7905, -2829, 5879, -8153, -2369, 2354, -4997, 3193, -7629, 7483, -4247, -2636, 2828, 168, 1893, 767, 2467, 3739, -3410, -2044, 960, 5847, -4125, 2689, -638, 2517, -6521, 1372, -6617, 7973, 7546, -6330, -3056, 5232, -6291, 2767, -615, -3104, -2241, -51, -3822, 1704, 5497, 7199, -6329, -802, -235, 4330, -5264, 4548, -5907, 3888, 2202, -1839, -1623, -6637, -7515, 40, 2927, -5940, -188, 2272, -4086, 4948, -689, -2184, -486, 6881, 2896, 5466, -1371, 7267, -1031}
	start := time.Now()
	fmt.Println("R:", enumeration(vector, len(vector)))	
	elapsed := time.Since(start)
	fmt.Printf("Tempo em %f segundos\n", elapsed.Seconds())
}
